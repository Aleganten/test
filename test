local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Breath, Dev build",
    SubTitle = "By Alex <3",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})


local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "scroll" }),
    Farming = Window:AddTab({ Title = "Farming", Icon = "hammer" }),
    Player = Window:AddTab({ Title = "Player", Icon = "smile" }),
    Combat = Window:AddTab({ Title = "Combat", Icon = "sword" }),
    World = Window:AddTab({ Title = "World", Icon = "globe" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}


-- force setting main tab
Window:SelectTab(1)
-- SETTINGS
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
-- SETTINGS

local lplr = game.Players.LocalPlayer
local camera = workspace.CurrentCamera
local teamcheck = false
local espEnabled = false

local players = game:GetService("Players")
local plr = players.LocalPlayer
local mouse = plr:GetMouse()
local char = plr.Character
local root:Part = if char then char:FindFirstChild("HumanoidRootPart") else nil
local hum:Humanoid = if char then char:FindFirstChild("Humanoid") else nil
plr.CharacterAdded:Connect(function() --update the char and root and hum when possible
	char = plr.Character
	root = char:WaitForChild("HumanoidRootPart")
	hum = char:WaitForChild("Humanoid")
end)
local rep = game:GetService("ReplicatedStorage")
local rs = game:GetService("RunService")
local input = game:GetService("UserInputService")
local keycodes = Enum.KeyCode:GetEnumItems()
local ts = game:GetService("TeleportService")
local cam = workspace.CurrentCamera
local pkt = require(rep.Modules.Packets)
local isvoid = game.PlaceId==11879754496
-- DEFAULTS END

if isvoid then
	for i,v in pairs(rep:WaitForChild("Events"):GetChildren()) do
		if v:IsA("RemoteEvent") then
			pkt[v.Name]={send=function(...) v:FireServer(...) end}
		end
	end
end
local bytenet:RemoteEvent = if not isvoid then rep:FindFirstChild("ByteNetReliable") else nil
local packetsenumerated = {}
local c = 0
for i,v in pairs(pkt) do
	c+=1
	packetsenumerated[i]=c
end
local itemids
local itemdata
for i,v in pairs(getreg()) do
	if type(v)=="table" then
		if not itemids and v[1]=="Wood" then
			itemids=v
		elseif not itemdata and type(v.Wood)=="table" and v.Wood.itemType then
			itemdata=v
		elseif itemids and itemdata then
			break
		end
	end
end

local function getItemId(name)
	return itemids[name]
end




local pickupbuf = buffer.create(2)
buffer.writeu8(pickupbuf,0,packetsenumerated.Pickup)
buffer.writeu8(pickupbuf,1,1)
local grabbed = {}
local function isGrabbed(c)
	return grabbed[c]==true
end
local function pickup(part)
	if isGrabbed(part) then return end
	if isvoid or not optimize then
		pkt.Pickup.send(part:GetAttribute("EntityID"))
	else
		bytenet:FireServer(pickupbuf,{part})
	end
	task.spawn(function()
		grabbed[part]=true
		task.wait(plr:GetNetworkPing()+1)
		grabbed[part]=nil
	end)
end



local function flatten(vec)
	return Vector3.new(vec.X,0,vec.Z)
end

local function plant(box,plant)
	if not isvoid then
		pkt.InteractStructure.send({ entityID = box, itemID = plant })
	else
		pkt.InteractStructure.send(boxGetAttribute("EntityID"),plant)
	end
end

local function getMovementRaycastParams()
	local rp = RaycastParams.new()
	rp.IgnoreWater=true
	rp.FilterType=Enum.RaycastFilterType.Exclude
	local filt={workspace:FindFirstChild("Items"),hum and hum.SeatPart and hum.SeatPart.Parent,workspace:FindFirstChild("Critters")}
	for i,v in pairs(game:GetService("Players"):GetPlayers()) do
		table.insert(filt,v.Character)
	end
	for i,v in pairs(workspace:GetChildren()) do
		if v.Name=="RainPart" then
			table.insert(filt,v)
		end
	end
	rp.FilterDescendantsInstances=filt
	return rp
end

local function getMover(part)
	for i,v in pairs(part:GetDescendants()) do
		if not v:IsA("BasePart") then continue end
		local ocf = v.CFrame
		v.CFrame=CFrame.new()
		if v.CFrame==CFrame.new() then
			v.CFrame=ocf
			return v
		end
	end
end
local function getMovePart():BasePart
	if not root then return nil end
	if not (hum and root and hum.SeatPart and hum.SeatPart.Parent) then return root end
	return getMover(hum.SeatPart.Parent) or root
end

local function moveTo(pos:CFrame|Vector3)
	if typeof(pos)=="Vector3" then pos = CFrame.new(pos) end
	local move=getMovePart()
	if move==root then
		move.CFrame = pos
	else
		local dif = (move.CFrame.Position-root.CFrame.Position)
		move.CFrame = pos+dif
	end
end

local function teleportStepToward(pos,rate,step,height)
	if not root then return end
	local posflat=flatten(pos)
	local cposflat=flatten(root.Position)
	local dir = (posflat-cposflat).Unit
	local dist = (posflat-cposflat).Magnitude
	if dir.X~=dir.X then
		dir=Vector3.new()
	end
	cposflat+=dir*math.clamp((step or rs.PreSimulation:Wait())*rate,0,dist)
	local ray = workspace:Raycast(cposflat+Vector3.new(0,root.Position.Y+25,0),Vector3.new(0,-10000,0),getMovementRaycastParams())
    if ray then
		moveTo(ray.Position+Vector3.new(0,height or 3.5,0))
	end
end

local function tweenStepToward(pos,rate,target,height)
	if not root then return end
	local posflat=flatten(pos)
	local cposflat=flatten(root.Position)
	local dir = (posflat-cposflat).Unit
	local dist = (posflat-cposflat).Magnitude
	if dir.X~=dir.X then
		dir=Vector3.new()
	end
	cposflat+=dir*math.clamp((step or rs.PreSimulation:Wait())*rate,0,dist)
	local ray = workspace:Raycast(cposflat+Vector3.new(0,root.Position.Y+25,0),Vector3.new(0,-20,0),getMovementRaycastParams())
    if ray then
		TweenService:Create(root, TweenInfo.new(rate, Enum.EasingStyle.Linear), {Position = ray.Position+Vector3.new(0,height or 3.5,0)}):Play()
	end
end





local armortable = {
    Leaf = {Shirt = "Leaf Shirt", Pants = "Leaf Pants", Hat = "", Name = "Leaf", Color = Color3.fromRGB(44, 107, 61)},
    Hide = {Shirt = "Hide Shirt", Pants = "Hide Pants", Hat = "", Name = "Hide", Color = Color3.fromRGB(130, 80, 40)},
    Iron = {Shirt = "Iron Chestplate", Pants = "Iron Greaves", Hat = "Iron Helmet", Name = "Iron", Color = Color3.fromRGB(138, 109, 90)},
    Steel = {Shirt = "Steel Chestplate", Pants = "Steel Greaves", Hat = "Steel Helmet", Name = "Steel", Color = Color3.fromRGB(76, 88, 102)},
    Adurite = {Shirt = "Adurite Chestplate", Pants = "Adurite Greaves", Hat = "Adurite Helmet", Name = "Adurite", Color = Color3.fromRGB(80, 200, 120)},
    Crystal = {Shirt = "Crystal Chestplate", Pants = "Crystal Greaves", Hat = "Crystal Crown", Name = "Hat", Color = Color3.fromRGB(167, 198, 237)},
    Magnetite = {Shirt = "Magnetite Chestplate", Pants = "Magnetite Greaves", Hat = "Magnetite Mask", Name = "Magnetite", Color = Color3.fromRGB(53, 53, 53)},
    Emerald = {Shirt = "Emerald Chestplate", Pants = "Emerald Greaves", Hat = "Emerald Helmet", Name = "Emerald", Color = Color3.fromRGB(80, 200, 120)},
    Pink = {Shirt = "Pink Diamond Chestplate", Pants = "Pink Diamond Greaves", Hat = "Pink Diamond Hood", Name = "Pink", Color = Color3.fromRGB(247, 167, 184)},
    Void = {Shirt = "Void Chestplate", Pants = "Void Greaves", Hat = "Void Shroud", Name = "Void", Color = Color3.fromRGB(25, 25, 25)},
    God = {Shirt = "God Chestplate", Pants = "God Legs", Hat = "God Halo", Name = "God", Color = Color3.fromRGB(255, 255, 0)}
}

local HeadOff = Vector3.new(0, 0.5, 0)
local LegOff = Vector3.new(0, 3, 0)

local boxes = {}

local function createBox(v)
    local box = {
        outline = Drawing.new("Square"),
        main = Drawing.new("Square"),
        nameTag = Drawing.new("Text"),
        armorTag = Drawing.new("Text"),
        healthBarOutline = Drawing.new("Square"),
        healthBar = Drawing.new("Square")
    }

    box.outline.Visible = false
    box.outline.Color = Color3.new(0, 0, 0)
    box.outline.Thickness = 3
    box.outline.Transparency = 1
    box.outline.Filled = false

    box.main.Visible = false
    box.main.Color = Color3.new(1, 1, 1)
    box.main.Thickness = 1
    box.main.Transparency = 1
    box.main.Filled = false

    box.nameTag.Visible = false
    box.nameTag.Color = Color3.new(1, 1, 1)
    box.nameTag.Size = 16
    box.nameTag.Center = true
    box.nameTag.Outline = true
    box.nameTag.Text = v.Name

    box.armorTag.Visible = false
    box.armorTag.Color = Color3.new(1, 1, 0)
    box.armorTag.Size = 14
    box.armorTag.Center = true
    box.armorTag.Outline = true

    box.healthBarOutline.Visible = false
    box.healthBarOutline.Color = Color3.new(0, 0, 0)
    box.healthBarOutline.Thickness = 1
    box.healthBarOutline.Transparency = 1
    box.healthBarOutline.Filled = false

    box.healthBar.Visible = false
    box.healthBar.Color = Color3.new(0, 1, 0)
    box.healthBar.Thickness = 1
    box.healthBar.Transparency = 1
    box.healthBar.Filled = true

    boxes[v] = box
end

local function toggleESP(state)
    espEnabled = state
    for _, box in pairs(boxes) do
        box.outline.Visible = false
        box.main.Visible = false
        box.nameTag.Visible = false
        box.armorTag.Visible = false
        box.healthBarOutline.Visible = false
        box.healthBar.Visible = false
    end
end

local function getArmorName(character)
    for i, v in pairs(armortable) do
        local foundarmor = "None"
        if character:FindFirstChild(v.Hat) then
            foundarmor = v.Name
        elseif character:FindFirstChild(v.Shirt) then
            foundarmor = v.Name
        elseif character:FindFirstChild(v.Pants) then
            foundarmor = v.Name
        end
        if foundarmor ~= "None" then return foundarmor else continue end
    end
end

local function boxesp()
    while true do
        if not espEnabled then
            for _, box in pairs(boxes) do
                box.outline.Visible = false
                box.main.Visible = false
                box.nameTag.Visible = false
                box.armorTag.Visible = false
                box.healthBarOutline.Visible = false
                box.healthBar.Visible = false
            end
        else
            for v, box in pairs(boxes) do
                if v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character.Humanoid.Health > 0 then
                    local RootPart = v.Character.HumanoidRootPart
                    local Head = v.Character.Head
                    local RootPosition, RootVis = camera:WorldToViewportPoint(RootPart.Position)
                    local HeadPosition = camera:WorldToViewportPoint(Head.Position + HeadOff)
                    local LegPosition = camera:WorldToViewportPoint(RootPart.Position - LegOff)

                    if RootVis then
                        box.outline.Size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                        box.outline.Position = Vector2.new(RootPosition.X - box.outline.Size.X / 2, RootPosition.Y - box.outline.Size.Y / 2)
                        box.outline.Visible = true

                        box.main.Size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                        box.main.Position = Vector2.new(RootPosition.X - box.main.Size.X / 2, RootPosition.Y - box.main.Size.Y / 2)
                        box.main.Visible = true

                        box.nameTag.Position = Vector2.new(HeadPosition.X, HeadPosition.Y - 20)
                        box.nameTag.Visible = true

                        local armorName = getArmorName(v.Character)
                        if armorName then
                            box.armorTag.Text = armorName
                            if armortable ~= "None" then
                            box.armorTag.Color = armortable[armorName].Color
                            else end
                            box.armorTag.Position = Vector2.new(HeadPosition.X, HeadPosition.Y - 40)
                            box.armorTag.Visible = true
                        else
                            box.armorTag.Text = "None"
                            box.armorTag.Color = Color3.fromRGB(255,255,255)
                            box.armorTag.Position = Vector2.new(HeadPosition.X, HeadPosition.Y - 40)
                            box.armorTag.Visible = true
                        end

                        local healthPercent = v.Character.Humanoid.Health / v.Character.Humanoid.MaxHealth
                        box.healthBarOutline.Size = Vector2.new(4, HeadPosition.Y - LegPosition.Y)
                        box.healthBarOutline.Position = Vector2.new(RootPosition.X - box.main.Size.X / 2 - 6, RootPosition.Y - box.main.Size.Y / 2)
                        box.healthBarOutline.Visible = true

                        box.healthBar.Size = Vector2.new(2, (HeadPosition.Y - LegPosition.Y) * healthPercent)
                        box.healthBar.Position = Vector2.new(RootPosition.X - box.main.Size.X / 2 - 5, RootPosition.Y - box.main.Size.Y / 2 + (HeadPosition.Y - LegPosition.Y) * (1 - healthPercent))
                        box.healthBar.Visible = true

                        if v.TeamColor == lplr.TeamColor and teamcheck then
                            box.outline.Visible = false
                            box.main.Visible = false
                            box.nameTag.Visible = false
                            box.armorTag.Visible = false
                            box.healthBarOutline.Visible = false
                            box.healthBar.Visible = false
                        end
                    else
                        box.outline.Visible = false
                        box.main.Visible = false
                        box.nameTag.Visible = false
                        box.armorTag.Visible = false
                        box.healthBarOutline.Visible = false
                        box.healthBar.Visible = false
                    end
                else
                    box.outline.Visible = false
                    box.main.Visible = false
                    box.nameTag.Visible = false
                    box.armorTag.Visible = false
                    box.healthBarOutline.Visible = false
                    box.healthBar.Visible = false
                end
            end
        end
        wait()
    end
end


-- DEPLOYABLE ESP
local deployablesESPEnabled = false
local deployableBoxes = {}

local function createDeployableBox(deployable)
    local box = {
        outline = Drawing.new("Square"),
        main = Drawing.new("Square"),
        nameTag = Drawing.new("Text"),
    }

    box.nameTag.Visible = false
    box.nameTag.Color = Color3.new(1, 1, 1)
    box.nameTag.Size = 16
    box.nameTag.Center = true
    box.nameTag.Outline = true
    box.nameTag.Text = deployable.Name

    deployableBoxes[deployable] = box
end

local function toggleDeployablesESP(state)
    deployablesESPEnabled = state
    for _, box in pairs(deployableBoxes) do
        box.nameTag.Visible = false
    end
end

local function deployableESP()
    while true do
        if not deployablesESPEnabled then
            for _, box in pairs(deployableBoxes) do
                box.nameTag.Visible = false
            end
        else
            for deployable, box in pairs(deployableBoxes) do
                if deployable:IsDescendantOf(workspace) then
                    local pivot = deployable:GetPivot().Position
                    local screenPosition, onScreen = camera:WorldToViewportPoint(pivot)

                    if onScreen then
                        box.nameTag.Position = Vector2.new(screenPosition.X, screenPosition.Y - 20)
                        box.nameTag.Visible = true
                    else
                        box.nameTag.Visible = false
                    end
                else
                    box.nameTag.Visible = false
                end
            end
        end
        wait()
    end
end

-- ITEM ESP
local itemsESPEnabled = false
local itemBoxes = {}

local function createItemBox(item)
    local box = {
        nameTag = Drawing.new("Text"),
    }

    box.nameTag.Visible = false
    box.nameTag.Color = Color3.new(1, 1, 1)
    box.nameTag.Size = 16
    box.nameTag.Center = true
    box.nameTag.Outline = true
    box.nameTag.Text = item.Name

    itemBoxes[item] = box
end

local function toggleItemsESP(state)
    itemsESPEnabled = state
    for _, box in pairs(itemBoxes) do
        box.nameTag.Visible = false
    end
end

local function itemESP()
    while true do
        if not itemsESPEnabled then
            for _, box in pairs(itemBoxes) do
                box.nameTag.Visible = false
            end
        else
            for item, box in pairs(itemBoxes) do
                if item:IsDescendantOf(workspace) then
                    local pivot = item:GetPivot().Position
                    local screenPosition, onScreen = camera:WorldToViewportPoint(pivot)

                    if onScreen then
                        box.nameTag.Position = Vector2.new(screenPosition.X, screenPosition.Y - 20)
                        box.nameTag.Visible = true
                    else
                        box.nameTag.Visible = false
                    end
                else
                    box.nameTag.Visible = false
                end
            end
        end
        wait()
    end
end

-- TOTEM ESP
local totemsESPEnabled = false
local totemBoxes = {}

local function createTotemBox(totem)
    local box = {
        nameTag = Drawing.new("Text"),
    }

    box.nameTag.Visible = false
    box.nameTag.Color = Color3.new(1, 1, 1)
    box.nameTag.Size = 16
    box.nameTag.Center = true
    box.nameTag.Outline = true
    box.nameTag.Text = totem.Name

    totemBoxes[totem] = box
end

local function toggleTotemsESP(state)
    totemsESPEnabled = state
    for _, box in pairs(totemBoxes) do
        box.nameTag.Visible = false
    end
end

local function totemESP()
    while true do
        if not totemsESPEnabled then
            for _, box in pairs(totemBoxes) do
                box.nameTag.Visible = false
            end
        else
            for totem, box in pairs(totemBoxes) do
                if totem:IsDescendantOf(workspace) then
                    local pivot = totem:GetPivot().Position
                    local screenPosition, onScreen = camera:WorldToViewportPoint(pivot)

                    if onScreen then
                        -- Get the TribeColor value and update the color
                        local tribeColorValue = totem:FindFirstChild("Coloration")
                        local tribeColorName = totem:FindFirstChild("TribeColor")
                        if tribeColorValue then
                            box.nameTag.Color = tribeColorValue.Color
                                if tribeColorName then
                                box.nameTag.Text = tribeColorName.Value .. " Totem"
                            end
                        else
                            box.nameTag.Color = Color3.new(1, 1, 1)
                        end

                        box.nameTag.Position = Vector2.new(screenPosition.X, screenPosition.Y - 20)
                        box.nameTag.Visible = true
                    else
                        box.nameTag.Visible = false
                    end
                else
                    box.nameTag.Visible = false
                end
            end
        end
        wait()
    end
end

for _, totem in pairs(workspace.Totems:GetChildren()) do
    createTotemBox(totem)
end

workspace.Totems.ChildAdded:Connect(createTotemBox)
workspace.Totems.ChildRemoved:Connect(function(totem)
    if totemBoxes[totem] then
        for _, element in pairs(totemBoxes[totem]) do
            element:Remove()
        end
        totemBoxes[totem] = nil
    end
end)

game:GetService("RunService").RenderStepped:Connect(totemESP)

for _, item in pairs(workspace.Items:GetChildren()) do
    createItemBox(item)
end

workspace.Items.ChildAdded:Connect(createItemBox)
workspace.Items.ChildRemoved:Connect(function(item)
    if itemBoxes[item] then
        for _, element in pairs(itemBoxes[item]) do
            element:Remove()
        end
        itemBoxes[item] = nil
    end
end)

game:GetService("RunService").RenderStepped:Connect(itemESP)



for _, deployable in pairs(workspace.Deployables:GetChildren()) do
    createDeployableBox(deployable)
end

game:GetService("RunService").RenderStepped:Connect(deployableESP)
for _, v in pairs(game.Players:GetPlayers()) do
    createBox(v)
end
game.Players.PlayerAdded:Connect(createBox)

game:GetService("RunService").RenderStepped:Connect(boxesp)

workspace.Deployables.ChildAdded:Connect(createDeployableBox)
workspace.Deployables.ChildRemoved:Connect(function(deployable)
    if deployableBoxes[deployable] then
        for _, element in pairs(deployableBoxes[deployable]) do
            element:Remove()
        end
        deployableBoxes[deployable] = nil
    end
end)



-- START OF GUI CREATION
local Section = Tabs.Main:AddSection("ESP")
Section:AddParagraph({
    Title = "Shows where players are located with a tag"
})

local PlayerEsp = Section:AddToggle("MyToggle", 
{
    Title = "Player ESP", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
	    toggleESP(true)
	else
	    toggleESP(false)
        end
    end 
})

local ItemEsp = Section:AddToggle("MyToggle", 
{
    Title = "Items", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
	    toggleItemsESP(true)
	else
	    toggleItemsESP(false)
        end
    end 
})

local TotemEsp = Section:AddToggle("MyToggle", 
{
    Title = "Totems", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
	    toggleTotemsESP(true)
	else
	    toggleTotemsESP(false)
        end
    end 
})

local BuildEsp = Section:AddToggle("MyToggle", 
{
    Title = "Builds", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
        toggleDeployablesESP(true)
	else
        toggleDeployablesESP(false)
        end
    end 
})













-- FARMING

local Section1 = Tabs.Farming:AddSection("Planting")

local PlantSelect = Section1:AddDropdown("Dropdown", {
    Title = "Seed",
    Description = "What to plant",
    Values = {"Bloodfruit"},
    Multi = false,
    Default = 1,
})

local Harvest = Section1:AddToggle("MyToggle", 
{
    Title = "Harvest", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
	else
        end
    end 
})

local AutoPlant = Section1:AddToggle("MyToggle", 
{
    Title = "Plant", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
	else
        end
    end 
})

local autofarmplants_speed = Section1:AddSlider("Slider", 
{
    Title = "TweenSpeed",
    Description = "",
    Default = 16,
    Min = 10,
    Max = 23,
    Rounding = 0.5,
    Callback = function(Value)
    end
})

local TweenEnabled = Section1:AddToggle("MyToggle", 
{
    Title = "Tween", 
    Description = "",
    Default = true,
    Callback = function(state)
	if state then
	else
        end
    end 
})

-- GETTING PLANTBOXES IN SERVER
local plantboxes = {}
for i,v in pairs(workspace.Deployables:GetChildren()) do
	if v.Name=="Plant Box" then
		table.insert(plantboxes,v)
		v:GetPropertyChangedSignal("Parent"):Connect(function()
			if v.Parent==nil then
				remove(plantboxes,v)
			end
		end)
	end
end
workspace.Deployables.ChildAdded:Connect(function(v)
	if v.Name=="Plant Box" then
		table.insert(plantboxes,v)
		v:GetPropertyChangedSignal("Parent"):Connect(function()
			if v.Parent==nil then
                task.wait(1)
                    if v.Parent==nil then
				    remove(plantboxes,v)
                end
			end
		end)
	end
end)
-- END GETTING PLANTBOXES



AutoPlant:OnChanged(function(Value)
    while AutoPlant.Value do
        local scandist = 50
        local lop = 0
        local closestbox
        local closestboxmag = scandist

        for i,v in pairs(workspace.Deployables:GetChildren()) do
            if v.Name=="Plant Box" and not v:FindFirstChild("Seed") and v:GetPivot().Position ~= Vector3.new() then
                local dist = (root.Position - v:GetPivot().Position).Magnitude
                if dist < closestboxmag then
                    closestbox = v
                    closestboxmag = dist
                    lop += 1
                end
                if #plantboxes > 1000 and (root.Position - v:GetPivot().Position).Magnitude < 20 then 
                    closestbox = v
                    closestboxmag = dist
                    break 
                end
            end
        end

        if closestbox and (closestbox:GetPivot().Position - root.Position).Magnitude < scandist then
            plant(closestbox:GetAttribute("EntityID"), getItemId(PlantSelect.Value))
        end

        local closestbush
        local closestbushmag = scandist * 5
        local step = rs.PreSimulation:Wait()

        for i, v in pairs(workspace:GetChildren()) do
            if (v:FindFirstChild("Trunk") or v:FindFirstChild("Leaves")) and v:GetPivot().Position ~= Vector3.new() then
                local dist = (root.Position - v:GetPivot().Position).Magnitude
                if dist < closestbushmag then
                    closestbush = v
                    closestbushmag = dist * 3
                end
                if dist < 25 and Harvest.Value then
                    pickup(v)
                end
            end
        end

        if closestbush and Harvest.Value and TweenEnabled.Value then
            teleportStepToward(closestbush:GetPivot().Position, autofarmplants_speed.Value, step, 4)
        elseif closestbox and TweenEnabled.Value then
            teleportStepToward(closestbox:GetPivot().Position, autofarmplants_speed.Value, step, 4)
        end
        task.wait(0.01)
    end
end)








local Section2 = Tabs.Farming:AddSection("Breaking")





